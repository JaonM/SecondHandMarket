package com.market.activity;

import android.app.ActionBar;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import com.market.adapter2.SearchResultAdapter;
import com.market.model.Item;
import com.market.util.Util;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.Serializable;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;

public class SearchResultActivity extends Activity
{
  SearchResultAdapter adapter;
  String key;
  ListView listView;

  private OutputStream createImageCacheFile(int paramInt)
  {
    boolean bool = Environment.getExternalStorageState().equals("mounted");
    Object localObject = null;
    if (bool);
    try
    {
      File localFile = new File(Environment.getExternalStorageDirectory().getCanonicalPath() + "/SecondHandMarket/cache");
      if (!localFile.exists())
        localFile.mkdirs();
      FileOutputStream localFileOutputStream = new FileOutputStream(new File(localFile.getCanonicalPath() + "/" + paramInt));
      localObject = localFileOutputStream;
      return localObject;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return null;
  }

  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(2130903102);
    this.listView = ((ListView)findViewById(2131034378));
    this.key = getIntent().getStringExtra("key");
    this.adapter = new SearchResultAdapter(this);
    this.listView.setAdapter(this.adapter);
    getActionBar().setDisplayHomeAsUpEnabled(true);
    getActionBar().setTitle("ËÑË÷½á¹û");
    new SearchTask(null).execute(new String[] { "http://10.96.73.76:8080/SecondHandMarket/SearchServlet" });
    this.listView.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        Intent localIntent = new Intent(SearchResultActivity.this, ItemActivity.class);
        localIntent.putExtra("item", (Serializable)SearchResultActivity.this.adapter.getList().get(paramAnonymousInt));
        SearchResultActivity.this.startActivity(localIntent);
      }
    });
  }

  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default:
    case 16908332:
    }
    while (true)
    {
      return super.onOptionsItemSelected(paramMenuItem);
      finish();
    }
  }

  class GetImageTask extends AsyncTask<Integer, Void, Void>
  {
    GetImageTask()
    {
    }

    public Void doInBackground(Integer[] paramArrayOfInteger)
    {
      try
      {
        HttpURLConnection localHttpURLConnection = (HttpURLConnection)new URL("http://10.96.73.76:8080/SecondHandMarket/" + ((Item)SearchResultActivity.this.adapter.getList().get(paramArrayOfInteger[0].intValue())).getPhotoPathOnServer()[0]).openConnection();
        localHttpURLConnection.setRequestMethod("GET");
        byte[] arrayOfByte = new byte[1024];
        InputStream localInputStream = localHttpURLConnection.getInputStream();
        ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
        while (true)
        {
          int i = localInputStream.read(arrayOfByte);
          if (i == -1)
          {
            localInputStream.close();
            localByteArrayOutputStream.flush();
            if (!new File(Environment.getExternalStorageDirectory().getCanonicalPath() + "/SecondHandMarket/cache" + "/" + ((Item)SearchResultActivity.this.adapter.getList().get(paramArrayOfInteger[0].intValue())).getId()).exists())
            {
              OutputStream localOutputStream = SearchResultActivity.this.createImageCacheFile(((Item)SearchResultActivity.this.adapter.getList().get(paramArrayOfInteger[0].intValue())).getId());
              localOutputStream.write(localByteArrayOutputStream.toByteArray());
              localOutputStream.close();
            }
            localByteArrayOutputStream.close();
            localHttpURLConnection.disconnect();
            break;
          }
          localByteArrayOutputStream.write(arrayOfByte, 0, i);
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
      return null;
    }

    public void onPostExecute(Void paramVoid)
    {
      SearchResultActivity.this.adapter.notifyDataSetChanged();
    }
  }

  private class SearchTask extends AsyncTask<String, Void, String>
  {
    ProgressDialog progressDialog;

    private SearchTask()
    {
    }

    public String doInBackground(String[] paramArrayOfString)
    {
      String str1 = null;
      try
      {
        HashMap localHashMap = new HashMap();
        localHashMap.put("key", SearchResultActivity.this.key);
        str1 = Util.postRequest(SearchResultActivity.this, paramArrayOfString[0], localHashMap);
        HttpURLConnection localHttpURLConnection = (HttpURLConnection)new URL(paramArrayOfString[0]).openConnection();
        localHttpURLConnection.setRequestMethod("POST");
        localHttpURLConnection.setDoInput(true);
        localHttpURLConnection.setDoOutput(true);
        localHttpURLConnection.setDefaultUseCaches(false);
        localHttpURLConnection.setRequestProperty("Content-Type", "text/html");
        localHttpURLConnection.setRequestProperty("Charset", "UTF-8");
        localHttpURLConnection.getOutputStream().write(SearchResultActivity.this.key.getBytes());
        String str2 = new BufferedReader(new InputStreamReader(localHttpURLConnection.getInputStream(), "UTF-8")).readLine();
        return str2;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
      return str1;
    }

    public void onPostExecute(String paramString)
    {
      if (paramString != null)
        while (true)
        {
          JSONArray localJSONArray;
          int i;
          int j;
          try
          {
            JSONObject localJSONObject1 = new JSONObject(paramString);
            String str = localJSONObject1.getString("info");
            if (str.equals("fail"))
            {
              this.progressDialog.dismiss();
              SearchResultActivity.this.setContentView(2130903101);
              return;
            }
            if (!str.equals("success"))
              break;
            this.progressDialog.dismiss();
            localJSONArray = localJSONObject1.getJSONArray("results");
            i = 0;
            if (i >= localJSONArray.length())
            {
              j = 0;
              if (j < SearchResultActivity.this.adapter.getList().size())
                break label320;
              SearchResultActivity.this.adapter.notifyDataSetChanged();
              return;
            }
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
            return;
          }
          Item localItem = new Item();
          JSONObject localJSONObject2 = localJSONArray.getJSONObject(i);
          localItem.setId(localJSONObject2.getInt("id"));
          localItem.setName(localJSONObject2.getString("name"));
          localItem.setPrice(localJSONObject2.getDouble("price"));
          localItem.setDescription(localJSONObject2.getString("description"));
          localItem.setPhotoCount(localJSONObject2.getInt("photoCount"));
          localItem.setOwnerId(localJSONObject2.getInt("ownerId"));
          localItem.setCollectCount(localJSONObject2.getInt("collectCount"));
          localItem.setClassfication1(localJSONObject2.getString("classfication1"));
          localItem.setClassfication2(localJSONObject2.getString("classfication2"));
          localItem.setStatus(localJSONObject2.getInt("status"));
          localItem.setPhotoPathOnServer(localJSONObject2.getString("photoPath").split(","));
          localItem.setBuyerId(localJSONObject2.getInt("buyerId"));
          SearchResultActivity.this.adapter.getList().add(localItem);
          i++;
          continue;
          label320: SearchResultActivity.GetImageTask localGetImageTask = new SearchResultActivity.GetImageTask(SearchResultActivity.this);
          Integer[] arrayOfInteger = new Integer[1];
          arrayOfInteger[0] = Integer.valueOf(j);
          localGetImageTask.execute(arrayOfInteger);
          j++;
        }
    }

    public void onPreExecute()
    {
      this.progressDialog = new ProgressDialog(SearchResultActivity.this);
      this.progressDialog.setProgressStyle(0);
      this.progressDialog.setMessage("ËÑË÷ÖÐ...");
      this.progressDialog.setCancelable(false);
      this.progressDialog.show();
    }
  }
}