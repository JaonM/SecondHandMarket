package com.market.activity;

import android.app.ActionBar;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.text.format.DateUtils;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import com.handmark.pulltorefresh.library.ILoadingLayout;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.market.adapter2.SpecClassficationListViewAdapter;
import com.market.model.Classfication;
import com.market.model.Item;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.Serializable;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONObject;

public class SpecClassficationActivity extends Activity
{
  SpecClassficationListViewAdapter adapter;
  String classfication1;
  String classfication2;
  int end = 6;
  PullToRefreshListView listView;
  ProgressDialog progressDialog;
  int start = 0;

  private OutputStream createImageCacheFile(int paramInt)
  {
    boolean bool = Environment.getExternalStorageState().equals("mounted");
    Object localObject = null;
    if (bool);
    try
    {
      File localFile = new File(Environment.getExternalStorageDirectory().getCanonicalPath() + "/SecondHandMarket/cache");
      if (!localFile.exists())
        localFile.mkdirs();
      FileOutputStream localFileOutputStream = new FileOutputStream(new File(localFile.getCanonicalPath() + "/" + paramInt));
      localObject = localFileOutputStream;
      return localObject;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return null;
  }

  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(2130903107);
    getActionBar().setDisplayHomeAsUpEnabled(true);
    this.adapter = new SpecClassficationListViewAdapter(this);
    Classfication localClassfication = (Classfication)getIntent().getSerializableExtra("classfication");
    this.classfication1 = localClassfication.getClassfication1Name();
    this.classfication2 = localClassfication.getClassfication2Name();
    getActionBar().setTitle(this.classfication1 + " " + this.classfication2);
    this.listView = ((PullToRefreshListView)findViewById(2131034392));
    this.listView.setAdapter(this.adapter);
    this.listView.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
      public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
      {
        Intent localIntent = new Intent(SpecClassficationActivity.this, ItemActivity.class);
        localIntent.putExtra("item", (Serializable)SpecClassficationActivity.this.adapter.getList().get(paramAnonymousInt + 1));
        SpecClassficationActivity.this.startActivity(localIntent);
      }
    });
    new GetItemTask(null).execute(new String[] { "http://10.96.73.76:8080/SecondHandMarket/ItemServlet" });
    this.listView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener()
    {
      public void onRefresh(PullToRefreshBase<ListView> paramAnonymousPullToRefreshBase)
      {
        String str = DateUtils.formatDateTime(SpecClassficationActivity.this, System.currentTimeMillis(), 524305);
        paramAnonymousPullToRefreshBase.getLoadingLayoutProxy().setLastUpdatedLabel(str);
        if (SpecClassficationActivity.this.listView.isHeaderShown())
        {
          SpecClassficationActivity.this.listView.getLoadingLayoutProxy(true, false).setPullLabel("下拉刷新");
          SpecClassficationActivity.this.listView.getLoadingLayoutProxy(true, false).setReleaseLabel("松开刷新...");
          SpecClassficationActivity.this.listView.getLoadingLayoutProxy(true, false).setRefreshingLabel("刷新中...");
          SpecClassficationActivity.this.start = 0;
          SpecClassficationActivity.this.end = 6;
          SpecClassficationActivity.this.adapter.getList().clear();
          new SpecClassficationActivity.GetItemTask(SpecClassficationActivity.this, null).execute(new String[] { "http://10.96.73.76:8080/SecondHandMarket/ItemServlet" });
        }
        while (!SpecClassficationActivity.this.listView.isFooterShown())
          return;
        SpecClassficationActivity.this.listView.getLoadingLayoutProxy(false, true).setPullLabel("上拉加载");
        SpecClassficationActivity.this.listView.getLoadingLayoutProxy(false, true).setReleaseLabel("松开加载更多...");
        SpecClassficationActivity.this.listView.getLoadingLayoutProxy(false, true).setRefreshingLabel("加载中...");
        SpecClassficationActivity localSpecClassficationActivity1 = SpecClassficationActivity.this;
        localSpecClassficationActivity1.start += SpecClassficationActivity.this.end;
        SpecClassficationActivity localSpecClassficationActivity2 = SpecClassficationActivity.this;
        localSpecClassficationActivity2.end = (6 + localSpecClassficationActivity2.end);
        new SpecClassficationActivity.GetItemTask(SpecClassficationActivity.this, null).execute(new String[] { "http://10.96.73.76:8080/SecondHandMarket/ItemServlet" });
      }
    });
    this.progressDialog = new ProgressDialog(this);
    this.progressDialog.setProgressStyle(0);
    this.progressDialog.setMessage("获取数据中..");
    this.progressDialog.show();
  }

  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    default:
    case 16908332:
    }
    while (true)
    {
      return super.onOptionsItemSelected(paramMenuItem);
      finish();
    }
  }

  class GetImageTask extends AsyncTask<Integer, Void, Void>
  {
    GetImageTask()
    {
    }

    public Void doInBackground(Integer[] paramArrayOfInteger)
    {
      try
      {
        HttpURLConnection localHttpURLConnection = (HttpURLConnection)new URL("http://10.96.73.76:8080/SecondHandMarket/" + ((Item)SpecClassficationActivity.this.adapter.getList().get(paramArrayOfInteger[0].intValue())).getPhotoPathOnServer()[0]).openConnection();
        localHttpURLConnection.setRequestMethod("GET");
        byte[] arrayOfByte = new byte[1024];
        InputStream localInputStream = localHttpURLConnection.getInputStream();
        ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
        while (true)
        {
          int i = localInputStream.read(arrayOfByte);
          if (i == -1)
          {
            localInputStream.close();
            localByteArrayOutputStream.flush();
            if (!new File(Environment.getExternalStorageDirectory().getCanonicalPath() + "/SecondHandMarket/cache" + "/" + ((Item)SpecClassficationActivity.this.adapter.getList().get(paramArrayOfInteger[0].intValue())).getId()).exists())
            {
              OutputStream localOutputStream = SpecClassficationActivity.this.createImageCacheFile(((Item)SpecClassficationActivity.this.adapter.getList().get(paramArrayOfInteger[0].intValue())).getId());
              localOutputStream.write(localByteArrayOutputStream.toByteArray());
              localOutputStream.close();
            }
            localByteArrayOutputStream.close();
            localHttpURLConnection.disconnect();
            break;
          }
          localByteArrayOutputStream.write(arrayOfByte, 0, i);
        }
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
      return null;
    }

    public void onPostExecute(Void paramVoid)
    {
      SpecClassficationActivity.this.adapter.notifyDataSetChanged();
    }
  }

  private class GetItemTask extends AsyncTask<String, Void, String>
  {
    private GetItemTask()
    {
    }

    public String doInBackground(String[] paramArrayOfString)
    {
      String str = null;
      try
      {
        HttpURLConnection localHttpURLConnection = (HttpURLConnection)new URL(paramArrayOfString[0] + "?classfication1=" + URLEncoder.encode(SpecClassficationActivity.this.classfication1, "UTF-8") + "&classfication2=" + URLEncoder.encode(SpecClassficationActivity.this.classfication2, "UTF-8") + "&start=" + SpecClassficationActivity.this.start + "&end=" + SpecClassficationActivity.this.end).openConnection();
        localHttpURLConnection.setRequestMethod("GET");
        localHttpURLConnection.setRequestProperty("Charset", "UTF-8");
        localHttpURLConnection.connect();
        str = new BufferedReader(new InputStreamReader(localHttpURLConnection.getInputStream(), "UTF-8")).readLine();
        localHttpURLConnection.disconnect();
        return str;
      }
      catch (Exception localException)
      {
        localException.printStackTrace();
      }
      return str;
    }

    public void onPostExecute(String paramString)
    {
      if (paramString != null)
        while (true)
        {
          JSONArray localJSONArray;
          int i;
          int j;
          try
          {
            JSONObject localJSONObject1 = new JSONObject(paramString);
            String str = localJSONObject1.getString("info");
            if (str.equals("fail"))
            {
              SpecClassficationActivity.this.progressDialog.dismiss();
              return;
            }
            if (!str.equals("success"))
              break;
            SpecClassficationActivity.this.progressDialog.dismiss();
            localJSONArray = localJSONObject1.getJSONArray("results");
            i = 0;
            if (i >= localJSONArray.length())
            {
              j = 0;
              if (j < SpecClassficationActivity.this.adapter.getList().size())
                break label328;
              SpecClassficationActivity.this.listView.onRefreshComplete();
              SpecClassficationActivity.this.adapter.notifyDataSetChanged();
              return;
            }
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
            return;
          }
          Item localItem = new Item();
          JSONObject localJSONObject2 = localJSONArray.getJSONObject(i);
          localItem.setId(localJSONObject2.getInt("id"));
          localItem.setName(localJSONObject2.getString("name"));
          localItem.setPrice(localJSONObject2.getDouble("price"));
          localItem.setDescription(localJSONObject2.getString("description"));
          localItem.setPhotoCount(localJSONObject2.getInt("photoCount"));
          localItem.setOwnerId(localJSONObject2.getInt("ownerId"));
          localItem.setCollectCount(localJSONObject2.getInt("collectCount"));
          localItem.setClassfication1(localJSONObject2.getString("classfication1"));
          localItem.setClassfication2(localJSONObject2.getString("classfication2"));
          localItem.setStatus(localJSONObject2.getInt("status"));
          localItem.setPhotoPathOnServer(localJSONObject2.getString("photoPath").split(","));
          localItem.setBuyerId(localJSONObject2.getInt("buyerId"));
          SpecClassficationActivity.this.adapter.getList().add(localItem);
          i++;
          continue;
          label328: SpecClassficationActivity.GetImageTask localGetImageTask = new SpecClassficationActivity.GetImageTask(SpecClassficationActivity.this);
          Integer[] arrayOfInteger = new Integer[1];
          arrayOfInteger[0] = Integer.valueOf(j);
          localGetImageTask.execute(arrayOfInteger);
          j++;
        }
    }
  }
}