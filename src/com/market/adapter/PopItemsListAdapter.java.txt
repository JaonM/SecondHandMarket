package com.market.adapter;

import android.content.Context;
import android.os.Environment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;
import com.market.model.Item;
import com.market.util.HandleBitmap;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class PopItemsListAdapter extends BaseAdapter
{
  List<Item> itemList;
  int listCount = 6;
  Context mContext;

  public PopItemsListAdapter(Context paramContext)
  {
    this.mContext = paramContext;
    this.itemList = new ArrayList();
  }

  public int getCount()
  {
    return this.itemList.size();
  }

  public Object getItem(int paramInt)
  {
    return this.itemList.get(paramInt);
  }

  public long getItemId(int paramInt)
  {
    return paramInt;
  }

  public List<Item> getList()
  {
    return this.itemList;
  }

  public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
  {
    View localView = LayoutInflater.from(this.mContext).inflate(2130903062, null);
    ((TextView)localView.findViewById(2131034245)).setText(((Item)this.itemList.get(paramInt)).getName());
    ((TextView)localView.findViewById(2131034246)).setText(((Item)this.itemList.get(paramInt)).getDescription());
    ((TextView)localView.findViewById(2131034248)).setText(((Item)this.itemList.get(paramInt)).getCollectCount() + "»À ’≤ÿ");
    ((TextView)localView.findViewById(2131034249)).setText("£§" + ((Item)this.itemList.get(paramInt)).getPrice());
    ImageView localImageView = (ImageView)localView.findViewById(2131034244);
    try
    {
      File localFile = new File(Environment.getExternalStorageDirectory().getCanonicalPath() + "/SecondHandMarket/cache/" + ((Item)this.itemList.get(paramInt)).getId());
      if (localFile.exists())
        localImageView.setImageBitmap(HandleBitmap.convertBitmap(localFile, 100));
      return localView;
    }
    catch (OutOfMemoryError localOutOfMemoryError)
    {
      localOutOfMemoryError.printStackTrace();
      System.gc();
      return localView;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return localView;
  }
}