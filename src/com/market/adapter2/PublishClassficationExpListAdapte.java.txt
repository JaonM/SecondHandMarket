package com.market.adapter2;

import android.content.Context;
import android.os.AsyncTask;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.ImageView;
import android.widget.TextView;
import com.market.adapter.ClassficationListAdapter;
import com.market.model.Classfication;
import com.market.util.Util;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;

public class PublishClassficationExpListAdapter extends BaseExpandableListAdapter
{
  private MapInteger, ListClassfication classficationMap;
  String[] groups;
  int[] imagesId = null;
  String[][] items;
  Context mContext;

  public PublishClassficationExpListAdapter(Context paramContext)
  {
    this.mContext = paramContext;
    this.groups = ClassficationListAdapter.classfication;
    this.items = new String[][] { { 书籍资料, 文具, 学习工具, 其他 }, { 电脑, 手机, 照相机, 平板, 播放器, 移动硬盘USB, 耳机, 其他 }, { 椅子, 桌子, 照明, 风扇, 床上用品 , 架子 , 饰品, 饮水机, 背包, 其他 }, { 自行车, 篮球, 足球, 网球, 羽毛球, 乒乓球, 排球, 运动器械, 其他 }, { 上衣女, 下装女, 女鞋, 男鞋, 套装, 围巾配饰, 女士包, 男装, 其他 }, { 其他 } };
    this.imagesId = ClassficationListAdapter.images;
    this.classficationMap = new HashMap();
    for (int i = 1; ; i++)
    {
      if (i  6)
        return;
      GetClassficationTask localGetClassficationTask = new GetClassficationTask();
      Integer[] arrayOfInteger = new Integer[1];
      arrayOfInteger[0] = Integer.valueOf(i);
      localGetClassficationTask.execute(arrayOfInteger);
    }
  }

  public Object getChild(int paramInt1, int paramInt2)
  {
    return this.items[paramInt1][paramInt2];
  }

  public long getChildId(int paramInt1, int paramInt2)
  {
    return paramInt2;
  }

  public View getChildView(int paramInt1, int paramInt2, boolean paramBoolean, View paramView, ViewGroup paramViewGroup)
  {
    View localView = LayoutInflater.from(this.mContext).inflate(2130903095, null);
    TextView localTextView = (TextView)localView.findViewById(2131034357);
    List localList = (List)this.classficationMap.get(Integer.valueOf(paramInt1 + 1));
    if (localList != null)
      localTextView.setText(((Classfication)localList.get(paramInt2)).getClassfication2Name());
    localTextView.setPadding(30, 10, 10, 10);
    return localView;
  }

  public int getChildrenCount(int paramInt)
  {
    return this.items[paramInt].length;
  }

  public Object getGroup(int paramInt)
  {
    return this.groups[paramInt];
  }

  public int getGroupCount()
  {
    return this.groups.length;
  }

  public long getGroupId(int paramInt)
  {
    return paramInt;
  }

  public View getGroupView(int paramInt, boolean paramBoolean, View paramView, ViewGroup paramViewGroup)
  {
    View localView = LayoutInflater.from(this.mContext).inflate(2130903094, null);
    ImageView localImageView = (ImageView)localView.findViewById(2131034355);
    TextView localTextView = (TextView)localView.findViewById(2131034356);
    localTextView.setText(this.groups[paramInt]);
    localTextView.setPadding(30, 10, 10, 10);
    localImageView.setImageResource(this.imagesId[paramInt]);
    return localView;
  }

  public boolean hasStableIds()
  {
    return true;
  }

  public boolean isChildSelectable(int paramInt1, int paramInt2)
  {
    return true;
  }

  class GetClassficationTask extends AsyncTaskInteger, Void, String[]
  {
    GetClassficationTask()
    {
    }

    public String[] doInBackground(Integer[] paramArrayOfInteger)
    {
      try
      {
        String str2 = Util.getRequest(PublishClassficationExpListAdapter.this.mContext, http10.96.73.768080SecondHandMarketClassficationServletkey=classfication&classfication1Id= + String.valueOf(paramArrayOfInteger[0]));
        str1 = str2;
        String[] arrayOfString = new String[2];
        arrayOfString[0] = str1;
        arrayOfString[1] = String.valueOf(paramArrayOfInteger[0]);
        return arrayOfString;
      }
      catch (Exception localException)
      {
        while (true)
        {
          localException.printStackTrace();
          String str1 = null;
        }
      }
    }

    public void onPostExecute(String[] paramArrayOfString)
    {
      if (paramArrayOfString[0] != null)
        try
        {
          JSONObject localJSONObject1 = new JSONObject(paramArrayOfString[0]);
          if (localJSONObject1.getString(info).equals(success))
          {
            JSONArray localJSONArray = localJSONObject1.getJSONArray(results);
            ArrayList localArrayList = new ArrayList();
            for (int i = 0; ; i++)
            {
              if (i = localJSONArray.length())
              {
                PublishClassficationExpListAdapter.this.classficationMap.put(Integer.valueOf(paramArrayOfString[1]), localArrayList);
                PublishClassficationExpListAdapter.this.notifyDataSetChanged();
                return;
              }
              JSONObject localJSONObject2 = localJSONArray.getJSONObject(i);
              Classfication localClassfication = new Classfication();
              localClassfication.setClassfication1Id(Integer.valueOf(localJSONObject2.getInt(classfication1Id)).intValue());
              localClassfication.setClassfication2Name(localJSONObject2.getString(classfication2Name));
              localArrayList.add(localClassfication);
            }
          }
        }
        catch (Exception localException)
        {
          localException.printStackTrace();
        }
    }
  }
}