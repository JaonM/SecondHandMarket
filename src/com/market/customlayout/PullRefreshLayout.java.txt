package com.market.customlayout;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.util.AttributeSet;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import java.text.SimpleDateFormat;
import java.util.Date;

public class PullRefreshLayout extends LinearLayout
  implements View.OnTouchListener
{
  public static final int ON_REFRESH = 1;
  public static final int PULL_TO_REFRESH = 0;
  public static final int REALEASE_TO_REFRESH = 2;
  public static float beginY = 0.0F;
  SharedPreferences.Editor editor;
  int headHideHeight;
  LinearLayout header;
  int hideHeight;
  private OnRefreshListener listener = new OnRefreshListener()
  {
    public boolean onRefresh()
    {
      return true;
    }
  };
  boolean loadOnce = false;
  Context mContext;
  TextView refresh_status;
  TextView refresh_time;
  ScrollView scrollView;
  SharedPreferences sharedPreferences;
  int speedY = 10;
  int status = 0;

  public PullRefreshLayout(Context paramContext)
  {
    super(paramContext);
    this.mContext = paramContext;
    init(paramContext);
  }

  public PullRefreshLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    this.mContext = paramContext;
    init(paramContext);
  }

  private void init(Context paramContext)
  {
    this.header = ((LinearLayout)LayoutInflater.from(paramContext).inflate(2130903056, null));
    this.hideHeight = (-1 * this.header.getMeasuredHeight());
    this.refresh_status = ((TextView)this.header.findViewById(2131034224));
    this.refresh_time = ((TextView)this.header.findViewById(2131034225));
    this.sharedPreferences = paramContext.getSharedPreferences("refreshtime", 0);
    addView(this.header, 0);
    this.header.setHorizontalFadingEdgeEnabled(false);
  }

  private boolean isReadyForRefresh()
  {
    int i = this.scrollView.getScrollY();
    boolean bool = false;
    if (i == 0)
    {
      this.status = 0;
      bool = true;
    }
    return bool;
  }

  private void updateHeaderView()
  {
    if (this.status == 0)
    {
      ((TextView)this.header.findViewById(2131034224)).setText("下拉刷新...");
      String str3 = this.sharedPreferences.getString("time", "");
      ((TextView)this.header.findViewById(2131034225)).setText("最近一次更新: " + str3);
    }
    if (this.status == 2)
    {
      ((TextView)this.header.findViewById(2131034224)).setText("松开即可刷新...");
      String str2 = this.sharedPreferences.getString("time", "");
      ((TextView)this.header.findViewById(2131034225)).setText("最近一次更新: " + str2);
    }
    if (this.status == 1)
    {
      ((TextView)this.header.findViewById(2131034224)).setText("刷新中..");
      String str1 = this.sharedPreferences.getString("time", "");
      ((TextView)this.header.findViewById(2131034225)).setText("最近一次更新: " + str1);
    }
  }

  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    if ((paramBoolean) && (!this.loadOnce))
    {
      this.hideHeight = (-1 * this.header.getMeasuredHeight());
      this.headHideHeight = (-1 * this.header.getMeasuredHeight());
      Log.v("onlayout", this.headHideHeight);
      this.scrollView = ((ScrollView)getChildAt(1));
      this.scrollView.setOnTouchListener(this);
      this.header.setPadding(0, this.hideHeight, 0, 0);
      this.header.invalidate();
      this.loadOnce = true;
    }
  }

  public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
  {
    switch (paramMotionEvent.getAction())
    {
    default:
      return false;
    case 0:
      beginY = paramMotionEvent.getY();
      Log.v("beginY", beginY);
      return false;
    case 2:
      float f1 = paramMotionEvent.getY();
      Log.v("action_moveY", f1);
      float f2 = f1 - beginY;
      beginY = f1;
      Log.v("distance", f2);
      if (isReadyForRefresh())
        if (f2 >= 0.0F)
        {
          this.status = 0;
          this.hideHeight = ((int)(this.hideHeight + f2 / 2.0F));
          Log.v("hideHeight", this.hideHeight);
          if (this.hideHeight >= 0)
            this.status = 2;
        }
      while (true)
      {
        updateHeaderView();
        this.header.setPadding(0, this.hideHeight, 0, 0);
        this.header.invalidate();
        return false;
        this.hideHeight = ((int)(this.hideHeight + f2 / 2.0F));
        this.status = 0;
        if (this.hideHeight <= this.headHideHeight)
        {
          this.hideHeight = this.headHideHeight;
          continue;
          if ((f2 >= 0.0F) || (this.hideHeight <= this.headHideHeight))
            break;
          this.hideHeight = (-20 + this.hideHeight);
          this.status = 0;
          if (this.hideHeight <= this.headHideHeight)
            this.hideHeight = this.headHideHeight;
        }
      }
    case 1:
    }
    Log.v("action_up", "up");
    switch (this.status)
    {
    case 1:
    default:
      return false;
    case 0:
      new HideHeaderTask(null).execute(new Void[0]);
      return false;
    case 2:
    }
    this.status = 1;
    updateHeaderView();
    this.hideHeight = 0;
    this.header.setPadding(0, this.hideHeight, 0, 0);
    this.header.invalidate();
    new RefreshTask(null).execute(new Void[0]);
    return false;
  }

  public void setOnRefreshListener(OnRefreshListener paramOnRefreshListener)
  {
    this.listener = paramOnRefreshListener;
  }

  private class HideHeaderTask extends AsyncTask<Void, Integer, Void>
  {
    private HideHeaderTask()
    {
    }

    protected Void doInBackground(Void[] paramArrayOfVoid)
    {
      while (true)
      {
        PullRefreshLayout localPullRefreshLayout = PullRefreshLayout.this;
        localPullRefreshLayout.hideHeight = (-20 + localPullRefreshLayout.hideHeight);
        if (PullRefreshLayout.this.hideHeight <= PullRefreshLayout.this.headHideHeight)
        {
          PullRefreshLayout.this.hideHeight = PullRefreshLayout.this.headHideHeight;
          return null;
        }
        Integer[] arrayOfInteger = new Integer[1];
        arrayOfInteger[0] = Integer.valueOf(PullRefreshLayout.this.hideHeight);
        publishProgress(arrayOfInteger);
      }
    }

    protected void onPostExecute(Void paramVoid)
    {
      PullRefreshLayout.this.header.setPadding(0, PullRefreshLayout.this.headHideHeight, 0, 0);
      PullRefreshLayout.this.header.postInvalidate();
    }

    protected void onProgressUpdate(Integer[] paramArrayOfInteger)
    {
      PullRefreshLayout.this.header.setPadding(0, paramArrayOfInteger[0].intValue(), 0, 0);
      PullRefreshLayout.this.header.postInvalidate();
    }
  }

  public static abstract interface OnRefreshListener
  {
    public abstract boolean onRefresh();
  }

  private class RefreshTask extends AsyncTask<Void, Void, Boolean>
  {
    private RefreshTask()
    {
    }

    protected Boolean doInBackground(Void[] paramArrayOfVoid)
    {
      try
      {
        Thread.sleep(2000L);
        if (PullRefreshLayout.this.listener.onRefresh())
          return Boolean.valueOf(true);
      }
      catch (Exception localException)
      {
        while (true)
          localException.printStackTrace();
      }
      return Boolean.valueOf(false);
    }

    protected void onPostExecute(Boolean paramBoolean)
    {
      if (paramBoolean.booleanValue())
      {
        ((TextView)PullRefreshLayout.this.header.findViewById(2131034224)).setText("刷新成功...");
        SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyy/MM/dd kk:mm:ss");
        PullRefreshLayout.this.editor = PullRefreshLayout.this.sharedPreferences.edit();
        PullRefreshLayout.this.editor.putString("time", localSimpleDateFormat.format(new Date()));
        PullRefreshLayout.this.editor.commit();
      }
      while (true)
      {
        new PullRefreshLayout.HideHeaderTask(PullRefreshLayout.this, null).execute(new Void[0]);
        PullRefreshLayout.this.status = 0;
        return;
        ((TextView)PullRefreshLayout.this.header.findViewById(2131034224)).setText("刷新失败...");
      }
    }
  }
}