package com.market.service;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.os.IBinder;
import android.util.Log;
import com.market.model.Item;
import com.market.privatespaceactivity.HavedPublishItemActivity;
import com.market.util.Util;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.json.JSONArray;
import org.json.JSONObject;

public class MarketService extends Service
{
  public static final String RECEIVE_ITEM = "receive item";
  public static final String RECEIVE_MESSAGE = "receive message";
  NotificationManager mNotificationManager;
  MarketReceiver receiver;
  MarketScheduler scheduler;

  private void registBroadcast()
  {
    this.receiver = new MarketReceiver(null);
    IntentFilter localIntentFilter = new IntentFilter();
    localIntentFilter.addAction("receive item");
    localIntentFilter.addAction("receive message");
    registerReceiver(this.receiver, localIntentFilter);
  }

  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }

  public void onCreate()
  {
    super.onCreate();
    Log.v("service", "on create");
    this.scheduler = new MarketScheduler(null);
    this.mNotificationManager = ((NotificationManager)getSystemService("notification"));
    this.scheduler.repeate(new GetOrderedItem(null), 0L, 900000L);
    this.scheduler.repeate(new GetItemMessage(null), 0L, 900000L);
  }

  public void onDestroy()
  {
    super.onDestroy();
    unregisterReceiver(this.receiver);
  }

  private class GetItemMessage
    implements Runnable
  {
    private GetItemMessage()
    {
    }

    public void run()
    {
      try
      {
        HashMap localHashMap = new HashMap();
        localHashMap.put("key", "message");
        localHashMap.put("userId", String.valueOf(MarketService.this.getSharedPreferences("islogin", 0).getInt("userId", -1)));
        String str3 = Util.postRequest(MarketService.this, "http://10.96.73.76:8080/SecondHandMarket/PullingServlet", localHashMap);
        str1 = str3;
        Log.v("message  result", str1);
        if (str1 == null);
      }
      catch (Exception localException1)
      {
        try
        {
          String str1;
          JSONObject localJSONObject1 = new JSONObject(str1);
          JSONArray localJSONArray1;
          if (localJSONObject1.getString("info").equals("success"))
            localJSONArray1 = localJSONObject1.getJSONArray("results");
          for (int i = 0; ; i++)
          {
            int j = localJSONArray1.length();
            if (i >= j)
            {
              return;
              localException1 = localException1;
              localException1.printStackTrace();
              str1 = null;
              break;
            }
            JSONObject localJSONObject2 = localJSONArray1.getJSONObject(i);
            String str2 = localJSONObject2.getString("itemName");
            JSONArray localJSONArray2 = localJSONObject2.getJSONArray("messageResults");
            Log.v("json array length", localJSONArray2.length());
            if (localJSONArray2.length() > 0)
            {
              Notification localNotification = new Notification(2130837535, "你有新的消息", System.currentTimeMillis());
              localNotification.flags = 16;
              localNotification.defaults = 3;
              long[] arrayOfLong = new long[4];
              arrayOfLong[1] = 100L;
              arrayOfLong[2] = 200L;
              arrayOfLong[3] = 300L;
              localNotification.vibrate = arrayOfLong;
              PendingIntent localPendingIntent = PendingIntent.getActivity(MarketService.this, 0, new Intent(), 0);
              localNotification.setLatestEventInfo(MarketService.this, "有人给你留言啦", "你的物品" + str2 + "收到了" + localJSONArray2.length() + "条留言", localPendingIntent);
              MarketService.this.mNotificationManager.notify(i + 200, localNotification);
            }
          }
        }
        catch (Exception localException2)
        {
          localException2.printStackTrace();
        }
      }
    }
  }

  private class GetOrderedItem
    implements Runnable
  {
    private GetOrderedItem()
    {
    }

    public void run()
    {
      try
      {
        HashMap localHashMap = new HashMap();
        localHashMap.put("key", "order");
        localHashMap.put("userId", String.valueOf(MarketService.this.getSharedPreferences("islogin", 0).getInt("userId", -1)));
        String str2 = Util.postRequest(MarketService.this, "http://10.96.73.76:8080/SecondHandMarket/PullingServlet", localHashMap);
        str1 = str2;
        if (str1 == null);
      }
      catch (Exception localException1)
      {
        try
        {
          String str1;
          JSONObject localJSONObject1 = new JSONObject(str1);
          JSONArray localJSONArray;
          if (localJSONObject1.getString("info").equals("success"))
            localJSONArray = localJSONObject1.getJSONArray("results");
          for (int i = 0; ; i++)
          {
            int j = localJSONArray.length();
            if (i >= j)
            {
              return;
              localException1 = localException1;
              localException1.printStackTrace();
              str1 = null;
              break;
            }
            JSONObject localJSONObject2 = localJSONArray.getJSONObject(i);
            Item localItem = new Item();
            localItem.setId(localJSONObject2.getInt("itemId"));
            localItem.setName(localJSONObject2.getString("name"));
            localItem.setPrice(localJSONObject2.getDouble("price"));
            localItem.setDescription(localJSONObject2.getString("description"));
            localItem.setPhotoCount(localJSONObject2.getInt("photoCount"));
            localItem.setOwnerId(localJSONObject2.getInt("ownerId"));
            localItem.setCollectCount(localJSONObject2.getInt("collectCount"));
            localItem.setClassfication1(localJSONObject2.getString("classfication1"));
            localItem.setClassfication2(localJSONObject2.getString("classfication2"));
            localItem.setStatus(localJSONObject2.getInt("status"));
            localItem.setPhotoPathOnServer(localJSONObject2.getString("photoPath").split(","));
            localItem.setBuyerId(localJSONObject2.getInt("buyerId"));
            Log.v("item", localItem.toString());
            Notification localNotification = new Notification(2130837535, "你有一条消息", System.currentTimeMillis());
            localNotification.flags = 16;
            localNotification.defaults = 3;
            Intent localIntent = new Intent(MarketService.this, HavedPublishItemActivity.class);
            localIntent.putExtra("item", localItem);
            localIntent.addFlags(335544320);
            PendingIntent localPendingIntent = PendingIntent.getActivity(MarketService.this, i, localIntent, 134217728);
            localNotification.setLatestEventInfo(MarketService.this, "物品被预定", "你的物品" + localItem.getName() + "已经被预定啦", localPendingIntent);
            long[] arrayOfLong = new long[4];
            arrayOfLong[1] = 100L;
            arrayOfLong[2] = 200L;
            arrayOfLong[3] = 300L;
            localNotification.vibrate = arrayOfLong;
            MarketService.this.mNotificationManager.notify(i, localNotification);
          }
        }
        catch (Exception localException2)
        {
          localException2.printStackTrace();
        }
      }
    }
  }

  private class MarketReceiver extends BroadcastReceiver
  {
    private MarketReceiver()
    {
    }

    public void onReceive(Context paramContext, Intent paramIntent)
    {
      if (paramIntent.getAction().equals("receive item"))
      {
        localItem = (Item)paramIntent.getSerializableExtra("item");
        k = paramIntent.getIntExtra("NID", -1);
        Log.v("broadcast", "broadcast");
        localNotification2 = new Notification(2130837535, "你有一条消息", System.currentTimeMillis());
        localNotification2.flags = 16;
        localIntent = new Intent(MarketService.this, HavedPublishItemActivity.class);
        localIntent.putExtra("item", localItem);
        localIntent.addFlags(335544320);
        localPendingIntent2 = PendingIntent.getActivity(MarketService.this, 0, localIntent, 0);
        localNotification2.setLatestEventInfo(MarketService.this, "物品被预定", "你的物品" + localItem.getName() + "已经被预定啦", localPendingIntent2);
        MarketService.this.mNotificationManager.notify(k, localNotification2);
      }
      while (!paramIntent.getAction().equals("receive message"))
      {
        Item localItem;
        int k;
        Notification localNotification2;
        Intent localIntent;
        PendingIntent localPendingIntent2;
        return;
      }
      String str = paramIntent.getStringExtra("itemName");
      int i = paramIntent.getIntExtra("messageCount", 0);
      int j = paramIntent.getIntExtra("NID", 0);
      Notification localNotification1 = new Notification(2130837535, "你有新的消息", System.currentTimeMillis());
      localNotification1.flags = 16;
      PendingIntent localPendingIntent1 = PendingIntent.getActivity(MarketService.this, 0, null, 0);
      localNotification1.setLatestEventInfo(MarketService.this, "有人给你留言啦", "你的物品" + str + "收到了" + i + "条留言", localPendingIntent1);
      MarketService.this.mNotificationManager.notify(j, localNotification1);
    }
  }

  private class MarketScheduler
  {
    ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(10);

    private MarketScheduler()
    {
    }

    public void repeate(Runnable paramRunnable, long paramLong1, long paramLong2)
    {
      this.executor.scheduleAtFixedRate(paramRunnable, paramLong1, paramLong2, TimeUnit.MILLISECONDS);
    }
  }
}